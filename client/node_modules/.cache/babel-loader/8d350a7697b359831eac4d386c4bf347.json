{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Desktop\\\\Bug-Tracker-Pern\\\\client\\\\src\\\\pages\\\\register\\\\registerpage.component.tsx\",\n    _s = $RefreshSig$();\n\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { registerUser, setAuthError, selectAuthState, clearAuthError } from '../../redux/slices/authSlice';\nimport { useHistory } from 'react-router-dom';\nimport { TextField, Paper, Typography, Button } from '@material-ui/core';\nimport { authPageStyles } from '../../styles/muiStyles';\nimport ErrorAlert from '../../components/error-alert/error-alert.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object({\n  username: yup.string().required('Required').max(20, 'Must be at most 20 characters').min(3, 'Must be at least 3 characters').matches(/^[a-zA-Z0-9-_]*$/, 'Only alphanum, dash & underscore characters are allowed'),\n  password: yup.string().required('Required').min(6, 'Must be at least 6 characters'),\n  confirmPassword: yup.string().required('Required').min(6, 'Must be at least 6 characters')\n});\n\nconst RegisterPage = () => {\n  _s();\n\n  const classes = authPageStyles();\n  const dispatch = useDispatch();\n  let history = useHistory();\n  const {\n    loading,\n    error\n  } = useSelector(selectAuthState);\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    mode: 'onChange',\n    resolver: yupResolver(validationSchema)\n  });\n\n  const handleRegister = ({\n    username,\n    password,\n    confirmPassword\n  }) => {\n    if (password !== confirmPassword) {\n      return dispatch(setAuthError('Passwords need to match'));\n    }\n\n    dispatch(registerUser({\n      username,\n      password\n    }, history));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.body,\n      elevation: 2,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        style: {\n          marginBottom: '2rem'\n        },\n        children: \"Register Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(handleRegister),\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          id: \"outlined-basic\",\n          label: \"Username\",\n          variant: \"outlined\",\n          type: \"text\",\n          name: \"username\",\n          fullWidth: true,\n          inputRef: register,\n          className: classes.inputField,\n          error: 'username' in errors,\n          helperText: 'username' in errors ? errors.username.message : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          id: \"outlined-basic\",\n          label: \"Password\",\n          variant: \"outlined\",\n          type: \"password\",\n          name: \"password\",\n          fullWidth: true,\n          inputRef: register,\n          className: classes.inputField,\n          error: 'password' in errors,\n          helperText: 'password' in errors ? errors.password.message : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          id: \"outlined-basic\",\n          label: \"Confirm Password\",\n          variant: \"outlined\",\n          type: \"password\",\n          name: \"confirmPassword\",\n          fullWidth: true,\n          inputRef: register,\n          className: classes.inputField,\n          error: 'confirmPassword' in errors,\n          helperText: 'confirmPassword' in errors ? errors.confirmPassword.message : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          size: \"large\",\n          color: \"primary\",\n          variant: \"contained\",\n          fullWidth: true,\n          children: \"Register!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          marginTop: '1rem',\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        children: [\"Already have an account? \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/login\",\n          children: \"Log in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 36\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(ErrorAlert, {\n        errorMsg: error,\n        clearErrorMsg: () => dispatch(clearAuthError())\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterPage, \"O+KHFXyWUPwJ7+6nMpYwPu0hVjk=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useForm];\n});\n\n_c = RegisterPage;\nexport default RegisterPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterPage\");","map":{"version":3,"sources":["C:/Users/david/Desktop/Bug-Tracker-Pern/client/src/pages/register/registerpage.component.tsx"],"names":["useForm","useDispatch","useSelector","yup","yupResolver","registerUser","setAuthError","selectAuthState","clearAuthError","useHistory","TextField","Paper","Typography","Button","authPageStyles","ErrorAlert","validationSchema","object","username","string","required","max","min","matches","password","confirmPassword","RegisterPage","classes","dispatch","history","loading","error","register","handleSubmit","errors","mode","resolver","handleRegister","root","body","marginBottom","inputField","message","marginTop","display","justifyContent"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\nimport {\r\n  registerUser,\r\n  setAuthError,\r\n  selectAuthState,\r\n  clearAuthError,\r\n} from '../../redux/slices/authSlice';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport { TextField, Paper, Typography, Button } from '@material-ui/core';\r\n\r\nimport { authPageStyles } from '../../styles/muiStyles';\r\n\r\nimport ErrorAlert from '../../components/error-alert/error-alert.component';\r\ninterface InputValues {\r\n  username: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n}\r\n\r\nconst validationSchema = yup.object({\r\n  username: yup\r\n    .string()\r\n    .required('Required')\r\n    .max(20, 'Must be at most 20 characters')\r\n    .min(3, 'Must be at least 3 characters')\r\n    .matches(\r\n      /^[a-zA-Z0-9-_]*$/,\r\n      'Only alphanum, dash & underscore characters are allowed'\r\n    ),\r\n  password: yup\r\n    .string()\r\n    .required('Required')\r\n    .min(6, 'Must be at least 6 characters'),\r\n  confirmPassword: yup\r\n    .string()\r\n    .required('Required')\r\n    .min(6, 'Must be at least 6 characters'),\r\n});\r\n\r\nconst RegisterPage = () => {\r\n  const classes = authPageStyles();\r\n  const dispatch = useDispatch();\r\n  let history = useHistory();\r\n  const { loading, error } = useSelector(selectAuthState);\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: 'onChange',\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n  const handleRegister = ({\r\n    username,\r\n    password,\r\n    confirmPassword,\r\n  }: InputValues) => {\r\n    if (password !== confirmPassword) {\r\n      return dispatch(setAuthError('Passwords need to match'));\r\n    }\r\n    dispatch(registerUser({ username, password }, history));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.body} elevation={2}>\r\n        <Typography variant=\"h4\" style={{ marginBottom: '2rem' }}>\r\n          Register Page\r\n        </Typography>\r\n        <form onSubmit={handleSubmit(handleRegister)}>\r\n          <TextField\r\n            required\r\n            id=\"outlined-basic\"\r\n            label=\"Username\"\r\n            variant=\"outlined\"\r\n            type=\"text\"\r\n            name=\"username\"\r\n            fullWidth\r\n            inputRef={register}\r\n            className={classes.inputField}\r\n            error={'username' in errors}\r\n            helperText={'username' in errors ? errors.username.message : ''}\r\n          />\r\n          <TextField\r\n            required\r\n            id=\"outlined-basic\"\r\n            label=\"Password\"\r\n            variant=\"outlined\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            fullWidth\r\n            inputRef={register}\r\n            className={classes.inputField}\r\n            error={'password' in errors}\r\n            helperText={'password' in errors ? errors.password.message : ''}\r\n          />\r\n          <TextField\r\n            required\r\n            id=\"outlined-basic\"\r\n            label=\"Confirm Password\"\r\n            variant=\"outlined\"\r\n            type=\"password\"\r\n            name=\"confirmPassword\"\r\n            fullWidth\r\n            inputRef={register}\r\n            className={classes.inputField}\r\n            error={'confirmPassword' in errors}\r\n            helperText={\r\n              'confirmPassword' in errors ? errors.confirmPassword.message : ''\r\n            }\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            size=\"large\"\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n          >\r\n            Register!\r\n          </Button>\r\n        </form>\r\n        <Typography\r\n          style={{\r\n            marginTop: '1rem',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n          }}\r\n        >\r\n          Already have an account? <a href=\"/login\">Log in</a>\r\n        </Typography>\r\n        {error && (\r\n          <ErrorAlert\r\n            errorMsg={error}\r\n            clearErrorMsg={() => dispatch(clearAuthError())}\r\n          />\r\n        )}\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n"]},"metadata":{},"sourceType":"module"}