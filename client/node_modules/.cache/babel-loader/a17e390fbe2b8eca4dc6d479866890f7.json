{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Desktop\\\\Bug-Tracker-Pern\\\\client\\\\src\\\\pages\\\\project-page\\\\projectpage.component.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport BugsTable from '../../components/bugs-table/bugs-table.component';\nimport ProjectHeader from '../../components/project-header/project-header.component';\nimport AddIcon from '@material-ui/icons/Add';\nimport { selectProjectById } from '../../redux/slices/projectSlice';\nimport { fetchBugs, selectBugsStateForProject, selectBugsState } from '../../redux/slices/bugSlice';\nimport BugForm from '../../components/bug-form/bug-form.component';\nimport Spinner from '../../components/spinner/spinner.component';\nimport FormDialog from '../../components/form-dialog/form-dialog.component';\nimport BugsTableMobile from '../../components/bugs-table-mobile/bugs-table-mobile.component';\nimport { useTheme, useMediaQuery } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProjectPage = () => {\n  _s();\n\n  const {\n    projectId\n  } = useParams();\n  const dispatch = useDispatch();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n  const currentProject = useSelector(state => selectProjectById(state, projectId));\n  const {\n    fetchStatus\n  } = useSelector(selectBugsState);\n  const bugs = useSelector(state => selectBugsStateForProject(state, projectId));\n  useEffect(() => {\n    dispatch(fetchBugs(projectId));\n  }, []);\n\n  const bugDisplay = () => {\n    if (fetchStatus === true) {\n      return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }, this);\n    } else {\n      return !isMobile ? /*#__PURE__*/_jsxDEV(BugsTable, {\n        projectId: projectId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(BugsTableMobile, {\n        bugs: bugs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [currentProject && currentProject ? /*#__PURE__*/_jsxDEV(ProjectHeader, {\n      currentProject: currentProject\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(FormDialog, {\n      title: \"Add a Bug\",\n      buttonType: {\n        type: 'normal',\n        text: 'Add a Bug',\n        icon: AddIcon\n      },\n      children: /*#__PURE__*/_jsxDEV(BugForm, {\n        editMode: \"add\",\n        projectId: projectId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), bugDisplay()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProjectPage, \"mfGL4A7wZcGSaVFvD4BSth8il5U=\", false, function () {\n  return [useParams, useDispatch, useTheme, useMediaQuery, useSelector, useSelector, useSelector];\n});\n\n_c = ProjectPage;\nexport default ProjectPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectPage\");","map":{"version":3,"sources":["C:/Users/david/Desktop/Bug-Tracker-Pern/client/src/pages/project-page/projectpage.component.tsx"],"names":["Fragment","useEffect","useDispatch","useSelector","useParams","BugsTable","ProjectHeader","AddIcon","selectProjectById","fetchBugs","selectBugsStateForProject","selectBugsState","BugForm","Spinner","FormDialog","BugsTableMobile","useTheme","useMediaQuery","ProjectPage","projectId","dispatch","theme","isMobile","breakpoints","down","currentProject","state","fetchStatus","bugs","bugDisplay","type","text","icon"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,OAAOC,SAAP,MAAsB,kDAAtB;AAEA,OAAOC,aAAP,MAA0B,0DAA1B;AAEA,OAAOC,OAAP,MAAoB,wBAApB;AAEA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SACEC,SADF,EAEEC,yBAFF,EAGEC,eAHF,QAIO,6BAJP;AAMA,OAAOC,OAAP,MAAoB,8CAApB;AACA,OAAOC,OAAP,MAAoB,4CAApB;AACA,OAAOC,UAAP,MAAuB,oDAAvB;AACA,OAAOC,eAAP,MAA4B,gEAA5B;AAEA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,mBAAxC;;;AAKA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAgBf,SAAS,EAA/B;AACA,QAAMgB,QAAQ,GAAGlB,WAAW,EAA5B;AACA,QAAMmB,KAAK,GAAGL,QAAQ,EAAtB;AACA,QAAMM,QAAQ,GAAGL,aAAa,CAACI,KAAK,CAACE,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,CAA9B;AACA,QAAMC,cAAc,GAAGtB,WAAW,CAAEuB,KAAD,IACjClB,iBAAiB,CAACkB,KAAD,EAAQP,SAAR,CADe,CAAlC;AAIA,QAAM;AAAEQ,IAAAA;AAAF,MAAkBxB,WAAW,CAACQ,eAAD,CAAnC;AAEA,QAAMiB,IAAI,GAAGzB,WAAW,CAAEuB,KAAD,IACvBhB,yBAAyB,CAACgB,KAAD,EAAQP,SAAR,CADH,CAAxB;AAIAlB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,QAAQ,CAACX,SAAS,CAACU,SAAD,CAAV,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMU,UAAU,GAAG,MAAM;AACvB,QAAIF,WAAW,KAAK,IAApB,EAA0B;AACxB,0BAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO;AACL,aAAO,CAACL,QAAD,gBACL,QAAC,SAAD;AAAW,QAAA,SAAS,EAAEH;AAAtB;AAAA;AAAA;AAAA;AAAA,cADK,gBAGL,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAES;AAAvB;AAAA;AAAA;AAAA;AAAA,cAHF;AAKD;AACF,GAVD;;AAYA,sBACE,QAAC,QAAD;AAAA,eACGH,cAAc,IAAIA,cAAlB,gBACC,QAAC,aAAD;AAAe,MAAA,cAAc,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA,YADD,GAEG,IAHN,eAIE,QAAC,UAAD;AACE,MAAA,KAAK,EAAC,WADR;AAEE,MAAA,UAAU,EAAE;AAAEK,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,IAAI,EAAE,WAAxB;AAAqCC,QAAAA,IAAI,EAAEzB;AAA3C,OAFd;AAAA,6BAIE,QAAC,OAAD;AAAS,QAAA,QAAQ,EAAC,KAAlB;AAAwB,QAAA,SAAS,EAAEY;AAAnC;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,YAJF,EAUGU,UAAU,EAVb;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA7CD;;GAAMX,W;UACkBd,S,EACLF,W,EACHc,Q,EACGC,a,EACMd,W,EAICA,W,EAEXA,W;;;KAXTe,W;AA+CN,eAAeA,WAAf","sourcesContent":["import { Fragment, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { RootState } from '../../redux/store';\r\nimport BugsTable from '../../components/bugs-table/bugs-table.component';\r\nimport BugsCreate from '../../components/bugs-create/bugs-create.component';\r\nimport ProjectHeader from '../../components/project-header/project-header.component';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport { selectProjectById } from '../../redux/slices/projectSlice';\r\nimport {\r\n  fetchBugs,\r\n  selectBugsStateForProject,\r\n  selectBugsState,\r\n} from '../../redux/slices/bugSlice';\r\n\r\nimport BugForm from '../../components/bug-form/bug-form.component';\r\nimport Spinner from '../../components/spinner/spinner.component';\r\nimport FormDialog from '../../components/form-dialog/form-dialog.component';\r\nimport BugsTableMobile from '../../components/bugs-table-mobile/bugs-table-mobile.component';\r\n\r\nimport { useTheme, useMediaQuery } from '@material-ui/core';\r\ninterface ParamTypes {\r\n  projectId: string;\r\n}\r\n\r\nconst ProjectPage = () => {\r\n  const { projectId } = useParams<ParamTypes>();\r\n  const dispatch = useDispatch();\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\r\n  const currentProject = useSelector((state: RootState) =>\r\n    selectProjectById(state, projectId)\r\n  );\r\n\r\n  const { fetchStatus } = useSelector(selectBugsState);\r\n\r\n  const bugs = useSelector((state: RootState) =>\r\n    selectBugsStateForProject(state, projectId)\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchBugs(projectId));\r\n  }, []);\r\n\r\n  const bugDisplay = () => {\r\n    if (fetchStatus === true) {\r\n      return <Spinner />;\r\n    } else {\r\n      return !isMobile ? (\r\n        <BugsTable projectId={projectId} />\r\n      ) : (\r\n        <BugsTableMobile bugs={bugs} />\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {currentProject && currentProject ? (\r\n        <ProjectHeader currentProject={currentProject} />\r\n      ) : null}\r\n      <FormDialog\r\n        title=\"Add a Bug\"\r\n        buttonType={{ type: 'normal', text: 'Add a Bug', icon: AddIcon }}\r\n      >\r\n        <BugForm editMode=\"add\" projectId={projectId} />\r\n      </FormDialog>\r\n      {bugDisplay()}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ProjectPage;\r\n"]},"metadata":{},"sourceType":"module"}