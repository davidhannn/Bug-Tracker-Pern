{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport authService from '../../services/auth';\nimport { fetchProjects } from './projectSlice';\nconst initialState = {\n  user: null\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setUser: (state, action) => {\n      state.user = action.payload;\n    },\n    logOutUser: (state, action) => {\n      state.user = null;\n    }\n  }\n});\nexport const {\n  setUser,\n  logOutUser\n} = authSlice.actions;\nexport const login = credentials => {\n  return async dispatch => {\n    try {\n      const userData = await authService.login(credentials);\n      dispatch(setUser(userData));\n      dispatch(fetchProjects());\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const registerUser = credentials => {\n  return async dispatch => {\n    try {\n      const newUser = await authService.register(credentials);\n      dispatch(setUser(newUser));\n      const loggedUser = await authService.verify();\n\n      if (loggedUser) {\n        dispatch(setUser(loggedUser));\n      }\n\n      dispatch(fetchProjects());\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const autoLogin = () => {\n  return async dispatch => {\n    try {\n      const loggedUser = await authService.verify();\n\n      if (loggedUser) {\n        dispatch(setUser(loggedUser));\n      }\n\n      dispatch(fetchProjects());\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const logout = () => {\n  return async dispatch => {\n    await authService.logout();\n    dispatch(logOutUser);\n  };\n};\nexport const selectAuthState = state => state.auth;\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/david/Desktop/Bug-Tracker-Pern/client/src/redux/slices/authSlice.ts"],"names":["createSlice","authService","fetchProjects","initialState","user","authSlice","name","reducers","setUser","state","action","payload","logOutUser","actions","login","credentials","dispatch","userData","err","console","log","registerUser","newUser","register","loggedUser","verify","autoLogin","logout","selectAuthState","auth","reducer"],"mappings":"AAEA,SAASA,WAAT,QAA2C,kBAA3C;AAGA,OAAOC,WAAP,MAAwB,qBAAxB;AAEA,SAASC,aAAT,QAA8B,gBAA9B;AAMA,MAAMC,YAA8B,GAAG;AACrCC,EAAAA,IAAI,EAAE;AAD+B,CAAvC;AAIA,MAAMC,SAAS,GAAGL,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,MADsB;AAE5BH,EAAAA,YAF4B;AAG5BI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA6C;AACpDD,MAAAA,KAAK,CAACL,IAAN,GAAaM,MAAM,CAACC,OAApB;AACD,KAHO;AAIRC,IAAAA,UAAU,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACL,IAAN,GAAa,IAAb;AACD;AANO;AAHkB,CAAD,CAA7B;AAaA,OAAO,MAAM;AAAEI,EAAAA,OAAF;AAAWI,EAAAA;AAAX,IAA0BP,SAAS,CAACQ,OAA1C;AAEP,OAAO,MAAMC,KAAK,GAAIC,WAAD,IAA+C;AAClE,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMhB,WAAW,CAACa,KAAZ,CAAkBC,WAAlB,CAAvB;AACAC,MAAAA,QAAQ,CAACR,OAAO,CAACS,QAAD,CAAR,CAAR;AAEAD,MAAAA,QAAQ,CAACd,aAAa,EAAd,CAAR;AACD,KALD,CAKE,OAAOgB,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,GATD;AAUD,CAXM;AAaP,OAAO,MAAMG,YAAY,GAAIN,WAAD,IAA+C;AACzE,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMM,OAAO,GAAG,MAAMrB,WAAW,CAACsB,QAAZ,CAAqBR,WAArB,CAAtB;AACAC,MAAAA,QAAQ,CAACR,OAAO,CAACc,OAAD,CAAR,CAAR;AAEA,YAAME,UAAU,GAAG,MAAMvB,WAAW,CAACwB,MAAZ,EAAzB;;AACA,UAAID,UAAJ,EAAgB;AACdR,QAAAA,QAAQ,CAACR,OAAO,CAACgB,UAAD,CAAR,CAAR;AACD;;AACDR,MAAAA,QAAQ,CAACd,aAAa,EAAd,CAAR;AACD,KATD,CASE,OAAOgB,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,GAbD;AAcD,CAfM;AAiBP,OAAO,MAAMQ,SAAS,GAAG,MAAgB;AACvC,SAAO,MAAOV,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMQ,UAAU,GAAG,MAAMvB,WAAW,CAACwB,MAAZ,EAAzB;;AACA,UAAID,UAAJ,EAAgB;AACdR,QAAAA,QAAQ,CAACR,OAAO,CAACgB,UAAD,CAAR,CAAR;AACD;;AAEDR,MAAAA,QAAQ,CAACd,aAAa,EAAd,CAAR;AACD,KAPD,CAOE,OAAOgB,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,GAXD;AAYD,CAbM;AAeP,OAAO,MAAMS,MAAM,GAAG,MAAgB;AACpC,SAAO,MAAOX,QAAP,IAAoB;AACzB,UAAMf,WAAW,CAAC0B,MAAZ,EAAN;AACAX,IAAAA,QAAQ,CAACJ,UAAD,CAAR;AACD,GAHD;AAID,CALM;AAOP,OAAO,MAAMgB,eAAe,GAAInB,KAAD,IAAsBA,KAAK,CAACoB,IAApD;AAEP,eAAexB,SAAS,CAACyB,OAAzB","sourcesContent":["import { AppThunk } from './../store';\r\nimport { CredentialsPayload } from './../types';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../store';\r\nimport { UserState } from '../types';\r\nimport authService from '../../services/auth';\r\n\r\nimport { fetchProjects } from './projectSlice';\r\n\r\ninterface InitialAuthState {\r\n  user: UserState | null;\r\n}\r\n\r\nconst initialState: InitialAuthState = {\r\n  user: null,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    setUser: (state, action: PayloadAction<UserState>) => {\r\n      state.user = action.payload;\r\n    },\r\n    logOutUser: (state, action) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setUser, logOutUser } = authSlice.actions;\r\n\r\nexport const login = (credentials: CredentialsPayload): AppThunk => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const userData = await authService.login(credentials);\r\n      dispatch(setUser(userData));\r\n\r\n      dispatch(fetchProjects());\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const registerUser = (credentials: CredentialsPayload): AppThunk => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const newUser = await authService.register(credentials);\r\n      dispatch(setUser(newUser));\r\n\r\n      const loggedUser = await authService.verify();\r\n      if (loggedUser) {\r\n        dispatch(setUser(loggedUser));\r\n      }\r\n      dispatch(fetchProjects());\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const autoLogin = (): AppThunk => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const loggedUser = await authService.verify();\r\n      if (loggedUser) {\r\n        dispatch(setUser(loggedUser));\r\n      }\r\n\r\n      dispatch(fetchProjects());\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const logout = (): AppThunk => {\r\n  return async (dispatch) => {\r\n    await authService.logout();\r\n    dispatch(logOutUser);\r\n  };\r\n};\r\n\r\nexport const selectAuthState = (state: RootState) => state.auth;\r\n\r\nexport default authSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}