{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Desktop\\\\Bug-Tracker-Pern\\\\client\\\\src\\\\pages\\\\register\\\\registerpage.component.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { registerUser, setAuthError, selectAuthState } from '../../redux/slices/authSlice';\nimport { useHistory } from 'react-router-dom';\nimport { TextField, Paper, Typography, Button } from '@material-ui/core';\nimport { authPageStyles } from '../../styles/muiStyles';\nimport ErrorAlert from '../../components/error-alert/error-alert.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RegisterPage = () => {\n  _s();\n\n  const classes = authPageStyles();\n  const dispatch = useDispatch();\n  let history = useHistory();\n  const {\n    loading,\n    error\n  } = useSelector(selectAuthState);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  const handleSubmit = () => {\n    if (password !== confirmPassword) {\n      return dispatch(setAuthError('Passwords need to match'));\n    }\n\n    dispatch(registerUser({\n      username,\n      password\n    }));\n    history.push('/');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.body,\n      elevation: 2,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        style: {\n          marginBottom: '2rem'\n        },\n        children: \"Register Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        noValidate: true,\n        autoComplete: \"off\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          id: \"outlined-basic\",\n          label: \"Username\",\n          variant: \"outlined\",\n          type: \"text\",\n          name: \"username\",\n          fullWidth: true,\n          className: classes.inputField,\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"outlined-basic\",\n          label: \"Password\",\n          variant: \"outlined\",\n          type: \"password\",\n          name: \"password\",\n          fullWidth: true,\n          className: classes.inputField,\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"outlined-basic\",\n          label: \"Confirm Password\",\n          variant: \"outlined\",\n          type: \"password\",\n          name: \"password2\",\n          fullWidth: true,\n          className: classes.inputField,\n          value: confirmPassword,\n          onChange: e => setConfirmPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          size: \"large\",\n          color: \"primary\",\n          variant: \"contained\",\n          fullWidth: true,\n          children: \"Register!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            marginTop: '1rem',\n            display: 'flex',\n            justifyContent: 'center'\n          },\n          children: [\"Already have an account? \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/login\",\n            children: \"Log in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 38\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(ErrorAlert, {\n        errorMsg: error,\n        clearErrorMsg: () => dispatch(clearAuthError())\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterPage, \"oa6sjVvngUqjx5aUQMGV+R0/Hpo=\", false, function () {\n  return [useDispatch, useHistory, useSelector];\n});\n\n_c = RegisterPage;\nexport default RegisterPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterPage\");","map":{"version":3,"sources":["C:/Users/david/Desktop/Bug-Tracker-Pern/client/src/pages/register/registerpage.component.tsx"],"names":["useState","useDispatch","useSelector","registerUser","setAuthError","selectAuthState","useHistory","TextField","Paper","Typography","Button","authPageStyles","ErrorAlert","RegisterPage","classes","dispatch","history","loading","error","username","setUsername","password","setPassword","confirmPassword","setConfirmPassword","handleSubmit","push","root","body","marginBottom","inputField","e","target","value","marginTop","display","justifyContent","clearAuthError"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n  registerUser,\r\n  setAuthError,\r\n  selectAuthState,\r\n} from '../../redux/slices/authSlice';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport { TextField, Paper, Typography, Button } from '@material-ui/core';\r\n\r\nimport { authPageStyles } from '../../styles/muiStyles';\r\n\r\nimport ErrorAlert from '../../components/error-alert/error-alert.component';\r\ninterface InputValues {\r\n  username: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n}\r\n\r\nconst RegisterPage = () => {\r\n  const classes = authPageStyles();\r\n  const dispatch = useDispatch();\r\n  let history = useHistory();\r\n  const { loading, error } = useSelector(selectAuthState);\r\n  const [username, setUsername] = useState<string>('');\r\n  const [password, setPassword] = useState<string>('');\r\n  const [confirmPassword, setConfirmPassword] = useState<string>('');\r\n\r\n  const handleSubmit = () => {\r\n    if (password !== confirmPassword) {\r\n      return dispatch(setAuthError('Passwords need to match'));\r\n    }\r\n    dispatch(registerUser({ username, password }));\r\n    history.push('/');\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.body} elevation={2}>\r\n        <Typography variant=\"h4\" style={{ marginBottom: '2rem' }}>\r\n          Register Page\r\n        </Typography>\r\n        <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Username\"\r\n            variant=\"outlined\"\r\n            type=\"text\"\r\n            name=\"username\"\r\n            fullWidth\r\n            className={classes.inputField}\r\n            value={username}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n              setUsername(e.target.value)\r\n            }\r\n          />\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Password\"\r\n            variant=\"outlined\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            fullWidth\r\n            className={classes.inputField}\r\n            value={password}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n              setPassword(e.target.value)\r\n            }\r\n          />\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Confirm Password\"\r\n            variant=\"outlined\"\r\n            type=\"password\"\r\n            name=\"password2\"\r\n            fullWidth\r\n            className={classes.inputField}\r\n            value={confirmPassword}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n              setConfirmPassword(e.target.value)\r\n            }\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            size=\"large\"\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n          >\r\n            Register!\r\n          </Button>\r\n          <Typography\r\n            style={{\r\n              marginTop: '1rem',\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            Already have an account? <a href=\"/login\">Log in</a>\r\n          </Typography>\r\n        </form>\r\n        {error && (\r\n          <ErrorAlert\r\n            errorMsg={error}\r\n            clearErrorMsg={() => dispatch(clearAuthError())}\r\n          />\r\n        )}\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n"]},"metadata":{},"sourceType":"module"}