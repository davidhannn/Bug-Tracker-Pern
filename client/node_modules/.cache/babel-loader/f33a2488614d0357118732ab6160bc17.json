{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Desktop\\\\Bug-Tracker-Pern\\\\client\\\\src\\\\components\\\\project-form\\\\project-form.component.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, Fragment } from 'react';\nimport { TextField, Button } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { getUsers, selectUsersState } from '../../redux/slices/usersSlice';\nimport { selectAuthState } from '../../redux/slices/authSlice';\nimport { editProjectName } from '../../redux/slices/projectSlice';\nimport { createNewProject } from '../../redux/slices/projectSlice';\nimport { useFormStyles } from '../../styles/muiStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProjectForm = ({\n  editMode,\n  currentName,\n  currentMembers,\n  projectId,\n  closeDialog\n}) => {\n  _s();\n\n  const classes = useFormStyles();\n  const dispatch = useDispatch();\n  const {\n    users\n  } = useSelector(selectUsersState);\n  const {\n    user\n  } = useSelector(selectAuthState);\n  const [members, setMembers] = useState([]);\n  const [name, setName] = useState('');\n  const [projectName, setProjectName] = useState('');\n  useEffect(() => {\n    dispatch(getUsers());\n  }, []);\n\n  const selectMembersOnChange = (e, selectedOption) => {\n    setMembers(selectedOption.map(option => option.id));\n  };\n\n  const handleCreateProject = e => {\n    dispatch(createNewProject({\n      name,\n      members\n    }, closeDialog));\n  };\n\n  const handleEditProjectName = () => {\n    dispatch(editProjectName(projectId, projectName));\n  };\n\n  const handleAddMembers = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: editMode === 'project' ? handleCreateProject : editMode === 'name' ? handleEditProjectName : handleAddMembers,\n    children: [editMode === 'project' ? /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-basic\",\n        label: \"Project Name\",\n        variant: \"outlined\",\n        fullWidth: true,\n        type: \"text\",\n        name: \"name\",\n        value: name,\n        className: classes.inputField,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n        multiple: true,\n        id: \"tags-outlined\",\n        className: classes.inputField,\n        onChange: selectMembersOnChange,\n        options: users.filter(projectUser => user != null ? projectUser.id !== user.id : null),\n        getOptionLabel: user => user && user.username,\n        defaultValue: [],\n        filterSelectedOptions: true,\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Select Members\",\n          placeholder: \"Favorites\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this) : null, editMode === 'name' ? /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-basic\",\n        label: \"Edit Project Name\",\n        variant: \"outlined\",\n        type: \"text\",\n        fullWidth: true,\n        className: classes.inputField,\n        defaultValue: currentName,\n        value: projectName,\n        onChange: e => setProjectName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this) : null, editMode === 'members' ? /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        multiple: true,\n        id: \"tags-outlined\",\n        className: classes.inputField,\n        onChange: selectMembersOnChange,\n        options: users.filter(projectUser => user != null ? projectUser.id !== user.id : null),\n        getOptionLabel: user => user && user.username,\n        defaultValue: [],\n        filterSelectedOptions: true,\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Select Members\",\n          placeholder: \"Favorites\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n      size: \"large\",\n      color: \"primary\",\n      variant: \"contained\",\n      type: \"submit\",\n      className: classes.submitButton,\n      children: editMode === 'name' ? 'Edit Project Name' : editMode === 'project' ? 'Add Project' : editMode === 'members' ? 'Add Members' : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProjectForm, \"YeTca3thLkC3/sHaqVBJBIWpu9I=\", false, function () {\n  return [useFormStyles, useDispatch, useSelector, useSelector];\n});\n\n_c = ProjectForm;\nexport default ProjectForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectForm\");","map":{"version":3,"sources":["C:/Users/david/Desktop/Bug-Tracker-Pern/client/src/components/project-form/project-form.component.tsx"],"names":["useState","useEffect","Fragment","TextField","Button","Autocomplete","useDispatch","useSelector","getUsers","selectUsersState","selectAuthState","editProjectName","createNewProject","useFormStyles","ProjectForm","editMode","currentName","currentMembers","projectId","closeDialog","classes","dispatch","users","user","members","setMembers","name","setName","projectName","setProjectName","selectMembersOnChange","e","selectedOption","map","option","id","handleCreateProject","handleEditProjectName","handleAddMembers","inputField","target","value","filter","projectUser","username","params","submitButton"],"mappings":"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","sourcesContent":["import { useState, useEffect, Fragment } from 'react';\r\n\r\nimport {\r\n  TextField,\r\n  Button,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Avatar,\r\n  Chip,\r\n  InputAdornment,\r\n} from '@material-ui/core';\r\n\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { getUsers, selectUsersState } from '../../redux/slices/usersSlice';\r\nimport { selectAuthState } from '../../redux/slices/authSlice';\r\nimport { editProjectName } from '../../redux/slices/projectSlice';\r\n\r\nimport { User } from '../../redux/types';\r\nimport { createNewProject } from '../../redux/slices/projectSlice';\r\nimport { useFormStyles } from '../../styles/muiStyles';\r\n\r\ninterface CreateProject {\r\n  editMode: 'project';\r\n  currentName?: string;\r\n  currentMembers?: string[];\r\n  projectId?: string;\r\n  closeDialog?: () => void;\r\n}\r\n\r\ninterface AddMembers {\r\n  editMode: 'members';\r\n  currentName?: string;\r\n  currentMembers?: string[];\r\n  projectId: string;\r\n  closeDialog?: () => void;\r\n}\r\n\r\ninterface EditProjectName {\r\n  editMode: 'name';\r\n  currentName: string;\r\n  projectId: string;\r\n  currentMembers?: string[];\r\n  closeDialog?: () => void;\r\n}\r\n\r\ntype ProjectFormType = CreateProject | EditProjectName | AddMembers;\r\n\r\nconst ProjectForm: React.FC<ProjectFormType> = ({\r\n  editMode,\r\n  currentName,\r\n  currentMembers,\r\n  projectId,\r\n  closeDialog,\r\n}) => {\r\n  const classes = useFormStyles();\r\n  const dispatch = useDispatch();\r\n  const { users } = useSelector(selectUsersState);\r\n  const { user } = useSelector(selectAuthState);\r\n\r\n  const [members, setMembers] = useState<string[]>([]);\r\n  const [name, setName] = useState<string>('');\r\n  const [projectName, setProjectName] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n  }, []);\r\n\r\n  const selectMembersOnChange = (e: any, selectedOption: User[]) => {\r\n    setMembers(selectedOption.map((option) => option.id));\r\n  };\r\n\r\n  const handleCreateProject = (e: React.SyntheticEvent) => {\r\n    dispatch(createNewProject({ name, members }, closeDialog));\r\n  };\r\n\r\n  const handleEditProjectName = () => {\r\n    dispatch(editProjectName(projectId as string, projectName));\r\n  };\r\n\r\n  const handleAddMembers = () => {};\r\n\r\n  return (\r\n    <form\r\n      onSubmit={\r\n        editMode === 'project'\r\n          ? handleCreateProject\r\n          : editMode === 'name'\r\n          ? handleEditProjectName\r\n          : handleAddMembers\r\n      }\r\n    >\r\n      {editMode === 'project' ? (\r\n        <Fragment>\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Project Name\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            className={classes.inputField}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n              setName(e.target.value)\r\n            }\r\n          />\r\n          <Autocomplete\r\n            multiple\r\n            id=\"tags-outlined\"\r\n            className={classes.inputField}\r\n            onChange={selectMembersOnChange}\r\n            options={users.filter((projectUser) =>\r\n              user != null ? projectUser.id !== user.id : null\r\n            )}\r\n            getOptionLabel={(user) => user && user.username}\r\n            defaultValue={[]}\r\n            filterSelectedOptions\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                variant=\"outlined\"\r\n                label=\"Select Members\"\r\n                placeholder=\"Favorites\"\r\n              />\r\n            )}\r\n          />\r\n        </Fragment>\r\n      ) : null}\r\n      {editMode === 'name' ? (\r\n        <Fragment>\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Edit Project Name\"\r\n            variant=\"outlined\"\r\n            type=\"text\"\r\n            fullWidth\r\n            className={classes.inputField}\r\n            defaultValue={currentName}\r\n            value={projectName}\r\n            onChange={(e) => setProjectName(e.target.value)}\r\n          />\r\n        </Fragment>\r\n      ) : null}\r\n\r\n      {editMode === 'members' ? (\r\n        <Fragment>\r\n          <Autocomplete\r\n            multiple\r\n            id=\"tags-outlined\"\r\n            className={classes.inputField}\r\n            onChange={selectMembersOnChange}\r\n            options={users.filter((projectUser) =>\r\n              user != null ? projectUser.id !== user.id : null\r\n            )}\r\n            getOptionLabel={(user) => user && user.username}\r\n            defaultValue={[]}\r\n            filterSelectedOptions\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                variant=\"outlined\"\r\n                label=\"Select Members\"\r\n                placeholder=\"Favorites\"\r\n              />\r\n            )}\r\n          />\r\n        </Fragment>\r\n      ) : null}\r\n\r\n      <Button\r\n        size=\"large\"\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        type=\"submit\"\r\n        className={classes.submitButton}\r\n      >\r\n        {editMode === 'name'\r\n          ? 'Edit Project Name'\r\n          : editMode === 'project'\r\n          ? 'Add Project'\r\n          : editMode === 'members'\r\n          ? 'Add Members'\r\n          : null}\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ProjectForm;\r\n"]},"metadata":{},"sourceType":"module"}