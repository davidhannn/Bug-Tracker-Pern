{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport bugService from '../../services/bug';\nconst initialState = {\n  bugs: {},\n  fetchStatus: false,\n  fetchError: null,\n  submitStatus: false,\n  submitError: null\n};\nconst bugSlice = createSlice({\n  name: 'bugs',\n  initialState,\n  reducers: {\n    setBugs: (state, action) => {\n      state.bugs[action.payload.projectId] = action.payload.bugs;\n      state.fetchStatus = false;\n      state.fetchError = null;\n    },\n    addBug: (state, action) => {\n      if (action.payload.projectId in state.bugs) {\n        state.bugs[action.payload.projectId] = [...state.bugs[action.payload.projectId], action.payload.bug];\n        state.submitStatus = false;\n        state.submitError = null;\n      } else {\n        state.bugs[action.payload.projectId] = [action.payload.bug];\n      }\n    },\n    removeBug: (state, action) => {\n      state.bugs[action.payload.projectId] = state.bugs[action.payload.projectId].filter(bug => bug.id !== action.payload.bugId);\n    },\n    updateBugStatus: (state, action) => {\n      state.bugs[action.payload.projectId] = state.bugs[action.payload.projectId].map(bug => bug.id === action.payload.bugId ? { ...bug,\n        ...action.payload.isResolved\n      } : bug);\n    },\n    setFetchBug: state => {\n      state.fetchStatus = true;\n      state.fetchError = null;\n    },\n    setSubmitBug: state => {\n      state.submitStatus = true;\n      state.submitError = null;\n    }\n  }\n});\nexport const {\n  setBugs,\n  addBug,\n  setSubmitBug,\n  setFetchBug,\n  removeBug,\n  updateBugStatus\n} = bugSlice.actions;\nexport const fetchBugs = projectId => {\n  return async dispatch => {\n    try {\n      dispatch(setFetchBug());\n      const bugData = await bugService.getBugs(projectId);\n      dispatch(setBugs({\n        bugs: bugData,\n        projectId\n      }));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const createBug = (projectId, bugData) => {\n  return async dispatch => {\n    try {\n      dispatch(setSubmitBug());\n      const createdBug = await bugService.createBug(projectId, bugData);\n      dispatch(addBug({\n        bug: createdBug,\n        projectId\n      }));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const deleteBug = (projectId, bugId) => {\n  return async dispatch => {\n    await bugService.deleteBug(projectId, bugId);\n    dispatch(removeBug({\n      projectId,\n      bugId\n    }));\n  };\n};\nexport const resolveBug = (projectId, bugId, action) => {\n  return async dispatch => {\n    try {\n      let updatedBug;\n\n      if (action === 'close') {\n        updatedBug = await bugService.closeBug(projectId, bugId);\n      } else {\n        updatedBug = bugService.reopenBug(projectId, bugId);\n      }\n\n      const {\n        isResolved\n      } = updatedBug;\n      dispatch(updateBugStatus({\n        isResolved,\n        bugId,\n        projectId\n      }));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const selectBugsState = state => state.bugs;\nexport const selectBugsStateForProject = (state, projectId) => {\n  var _state$bugs$bugs;\n\n  return (_state$bugs$bugs = state.bugs.bugs) === null || _state$bugs$bugs === void 0 ? void 0 : _state$bugs$bugs[projectId];\n};\nexport const selectBugById = (state, bugId, projectId) => {\n  var _state$bugs$bugs2;\n\n  return (_state$bugs$bugs2 = state.bugs.bugs) === null || _state$bugs$bugs2 === void 0 ? void 0 : _state$bugs$bugs2[projectId].find(b => b.id === bugId);\n};\nexport default bugSlice.reducer;","map":{"version":3,"sources":["C:/Users/david/Desktop/Bug-Tracker-Pern/client/src/redux/slices/bugSlice.ts"],"names":["createSlice","bugService","initialState","bugs","fetchStatus","fetchError","submitStatus","submitError","bugSlice","name","reducers","setBugs","state","action","payload","projectId","addBug","bug","removeBug","filter","id","bugId","updateBugStatus","map","isResolved","setFetchBug","setSubmitBug","actions","fetchBugs","dispatch","bugData","getBugs","err","console","log","createBug","createdBug","deleteBug","resolveBug","updatedBug","closeBug","reopenBug","selectBugsState","selectBugsStateForProject","selectBugById","find","b","reducer"],"mappings":"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","sourcesContent":["import { AppThunk } from './../store';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../store';\r\nimport { BugState, BugPayload } from '../types';\r\nimport bugService from '../../services/bug';\r\ninterface InitialBugState {\r\n  bugs: { [projectId: string]: BugState[] };\r\n  fetchStatus: boolean;\r\n  fetchError: string | null;\r\n  submitStatus: boolean;\r\n  submitError: string | null;\r\n}\r\n\r\nconst initialState: InitialBugState = {\r\n  bugs: {},\r\n  fetchStatus: false,\r\n  fetchError: null,\r\n  submitStatus: false,\r\n  submitError: null,\r\n};\r\n\r\nconst bugSlice = createSlice({\r\n  name: 'bugs',\r\n  initialState,\r\n  reducers: {\r\n    setBugs: (\r\n      state,\r\n      action: PayloadAction<{ bugs: BugState[]; projectId: string }>\r\n    ) => {\r\n      state.bugs[action.payload.projectId] = action.payload.bugs;\r\n      state.fetchStatus = false;\r\n      state.fetchError = null;\r\n    },\r\n    addBug: (\r\n      state,\r\n      action: PayloadAction<{ bug: BugState; projectId: string }>\r\n    ) => {\r\n      if (action.payload.projectId in state.bugs) {\r\n        state.bugs[action.payload.projectId] = [\r\n          ...state.bugs[action.payload.projectId],\r\n          action.payload.bug,\r\n        ];\r\n        state.submitStatus = false;\r\n        state.submitError = null;\r\n      } else {\r\n        state.bugs[action.payload.projectId] = [action.payload.bug];\r\n      }\r\n    },\r\n    removeBug: (\r\n      state,\r\n      action: PayloadAction<{ projectId: string; bugId: string }>\r\n    ) => {\r\n      state.bugs[action.payload.projectId] = state.bugs[\r\n        action.payload.projectId\r\n      ].filter((bug) => bug.id !== action.payload.bugId);\r\n    },\r\n    updateBugStatus: (\r\n      state,\r\n      action: PayloadAction<{\r\n        isResolved: Boolean;\r\n        projectId: string;\r\n        bugId: string;\r\n      }>\r\n    ) => {\r\n      state.bugs[action.payload.projectId] = state.bugs[\r\n        action.payload.projectId\r\n      ].map((bug) =>\r\n        bug.id === action.payload.bugId\r\n          ? { ...bug, ...action.payload.isResolved }\r\n          : bug\r\n      );\r\n    },\r\n    setFetchBug: (state) => {\r\n      state.fetchStatus = true;\r\n      state.fetchError = null;\r\n    },\r\n    setSubmitBug: (state) => {\r\n      state.submitStatus = true;\r\n      state.submitError = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setBugs,\r\n  addBug,\r\n  setSubmitBug,\r\n  setFetchBug,\r\n  removeBug,\r\n  updateBugStatus,\r\n} = bugSlice.actions;\r\n\r\nexport const fetchBugs = (projectId: string): AppThunk => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setFetchBug());\r\n      const bugData = await bugService.getBugs(projectId);\r\n      dispatch(setBugs({ bugs: bugData, projectId }));\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const createBug = (projectId: string, bugData: BugPayload): AppThunk => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setSubmitBug());\r\n      const createdBug = await bugService.createBug(projectId, bugData);\r\n      dispatch(addBug({ bug: createdBug, projectId }));\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteBug = (projectId: string, bugId: string): AppThunk => {\r\n  return async (dispatch) => {\r\n    await bugService.deleteBug(projectId, bugId);\r\n    dispatch(removeBug({ projectId, bugId }));\r\n  };\r\n};\r\n\r\nexport const resolveBug = (\r\n  projectId: string,\r\n  bugId: string,\r\n  action: 'close' | 'reopen'\r\n): AppThunk => {\r\n  return async (dispatch) => {\r\n    try {\r\n      let updatedBug;\r\n      if (action === 'close') {\r\n        updatedBug = await bugService.closeBug(projectId, bugId);\r\n      } else {\r\n        updatedBug = bugService.reopenBug(projectId, bugId);\r\n      }\r\n\r\n      const { isResolved } = updatedBug;\r\n\r\n      dispatch(updateBugStatus({ isResolved, bugId, projectId }));\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const selectBugsState = (state: RootState) => state.bugs;\r\n\r\nexport const selectBugsStateForProject = (\r\n  state: RootState,\r\n  projectId: string\r\n) => {\r\n  return state.bugs.bugs?.[projectId];\r\n};\r\n\r\nexport const selectBugById = (\r\n  state: RootState,\r\n  bugId: string,\r\n  projectId: string\r\n) => {\r\n  return state.bugs.bugs?.[projectId].find((b) => b.id === bugId);\r\n};\r\nexport default bugSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}