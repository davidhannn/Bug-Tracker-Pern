{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport projectService from '../../services/projects';\nconst initialState = {\n  projects: [],\n  fetchStatus: 'idle',\n  fetchError: null,\n  submitLoading: false,\n  submitError: null,\n  sortBy: 'newest'\n};\nconst projectsSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {\n    setProjects: (state, action) => {\n      state.projects = action.payload;\n      state.fetchStatus = 'success';\n      state.fetchError = null;\n    },\n    addProject: (state, action) => {\n      state.projects = [...state.projects, action.payload];\n      state.submitLoading = false;\n      state.submitError = null;\n    },\n    setProjectsFetchLoading: state => {\n      state.fetchStatus = 'loading';\n      state.fetchError = null;\n    },\n    removeProject: (state, action) => {\n      state.projects = state.projects.filter(project => project.id !== action.payload);\n    },\n    updateProjectName: (state, action) => {\n      state.projects = state.projects.map(project => project.id === action.payload.projectId ? { ...project,\n        ...action.payload.data\n      } : project);\n    },\n    setSubmitProjectLoading: state => {\n      state.submitLoading = true;\n      state.submitError = null;\n    },\n    sortProjectsBy: (state, action) => {\n      state.sortBy = action.payload;\n    }\n  }\n});\nexport const {\n  setProjects,\n  addProject,\n  setProjectsFetchLoading,\n  removeProject,\n  updateProjectName,\n  setSubmitProjectLoading,\n  sortProjectsBy\n} = projectsSlice.actions;\nexport const fetchProjects = () => {\n  return async dispatch => {\n    try {\n      dispatch(setProjectsFetchLoading());\n      const allProjects = await projectService.getProjects();\n      dispatch(setProjects(allProjects));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const createNewProject = (projectData, closeDialog) => {\n  return async dispatch => {\n    try {\n      dispatch(setSubmitProjectLoading());\n      const newProject = await projectService.createProject(projectData);\n      dispatch(addProject(newProject));\n      closeDialog && closeDialog();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const deleteProject = (projectId, history) => {\n  return async dispatch => {\n    try {\n      await projectService.deleteProject(projectId);\n      history.push('/');\n      dispatch(removeProject(projectId));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const editProjectName = (projectId, name) => {\n  return async dispatch => {\n    try {\n      const updatedProjectName = await projectService.editProjectName(projectId, name);\n      dispatch(updateProjectName({\n        data: {\n          name: updatedProjectName.name\n        },\n        projectId\n      }));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const selectProjectsState = state => state.projects;\nexport const selectProjectById = (state, projectId) => {\n  return state.projects.projects.find(p => p.id === projectId);\n};\nexport default projectsSlice.reducer;","map":{"version":3,"sources":["C:/Users/david/Desktop/Bug-Tracker-Pern/client/src/redux/slices/projectSlice.ts"],"names":["createSlice","projectService","initialState","projects","fetchStatus","fetchError","submitLoading","submitError","sortBy","projectsSlice","name","reducers","setProjects","state","action","payload","addProject","setProjectsFetchLoading","removeProject","filter","project","id","updateProjectName","map","projectId","data","setSubmitProjectLoading","sortProjectsBy","actions","fetchProjects","dispatch","allProjects","getProjects","err","console","log","createNewProject","projectData","closeDialog","newProject","createProject","deleteProject","history","push","editProjectName","updatedProjectName","selectProjectsState","selectProjectById","find","p","reducer"],"mappings":"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","sourcesContent":["import { ProjectSortValues } from './../types';\r\nimport { AppThunk } from './../store';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../store';\r\nimport { ProjectState, ProjectPayload } from '../types';\r\nimport projectService from '../../services/projects';\r\nimport { History } from 'history';\r\n\r\ninterface InitialProjectsState {\r\n  projects: ProjectState[];\r\n  fetchStatus: 'idle' | 'loading' | 'success' | 'fail';\r\n  fetchError: string | null;\r\n  submitLoading: boolean;\r\n  submitError: string | null;\r\n  sortBy: ProjectSortValues;\r\n}\r\n\r\nconst initialState: InitialProjectsState = {\r\n  projects: [],\r\n  fetchStatus: 'idle',\r\n  fetchError: null,\r\n  submitLoading: false,\r\n  submitError: null,\r\n  sortBy: 'newest',\r\n};\r\n\r\nconst projectsSlice = createSlice({\r\n  name: 'projects',\r\n  initialState,\r\n  reducers: {\r\n    setProjects: (state, action: PayloadAction<ProjectState[]>) => {\r\n      state.projects = action.payload;\r\n      state.fetchStatus = 'success';\r\n      state.fetchError = null;\r\n    },\r\n    addProject: (state, action: PayloadAction<ProjectState>) => {\r\n      state.projects = [...state.projects, action.payload];\r\n      state.submitLoading = false;\r\n      state.submitError = null;\r\n    },\r\n    setProjectsFetchLoading: (state) => {\r\n      state.fetchStatus = 'loading';\r\n      state.fetchError = null;\r\n    },\r\n    removeProject: (state, action: PayloadAction<string>) => {\r\n      state.projects = state.projects.filter(\r\n        (project) => project.id !== action.payload\r\n      );\r\n    },\r\n    updateProjectName: (\r\n      state,\r\n      action: PayloadAction<{ data: { name: string }; projectId: string }>\r\n    ) => {\r\n      state.projects = state.projects.map((project) =>\r\n        project.id === action.payload.projectId\r\n          ? { ...project, ...action.payload.data }\r\n          : project\r\n      );\r\n    },\r\n    setSubmitProjectLoading: (state) => {\r\n      state.submitLoading = true;\r\n      state.submitError = null;\r\n    },\r\n    sortProjectsBy: (state, action: PayloadAction<ProjectSortValues>) => {\r\n      state.sortBy = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setProjects,\r\n  addProject,\r\n  setProjectsFetchLoading,\r\n  removeProject,\r\n  updateProjectName,\r\n  setSubmitProjectLoading,\r\n  sortProjectsBy,\r\n} = projectsSlice.actions;\r\n\r\nexport const fetchProjects = (): AppThunk => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setProjectsFetchLoading());\r\n      const allProjects = await projectService.getProjects();\r\n      dispatch(setProjects(allProjects));\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const createNewProject = (\r\n  projectData: ProjectPayload,\r\n  closeDialog?: () => void\r\n): AppThunk => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setSubmitProjectLoading());\r\n      const newProject = await projectService.createProject(projectData);\r\n      dispatch(addProject(newProject));\r\n      closeDialog && closeDialog();\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteProject = (\r\n  projectId: string,\r\n  history: History\r\n): AppThunk => {\r\n  return async (dispatch) => {\r\n    try {\r\n      await projectService.deleteProject(projectId);\r\n      history.push('/');\r\n      dispatch(removeProject(projectId));\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editProjectName = (projectId: string, name: string): AppThunk => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const updatedProjectName = await projectService.editProjectName(\r\n        projectId,\r\n        name\r\n      );\r\n      dispatch(\r\n        updateProjectName({\r\n          data: { name: updatedProjectName.name },\r\n          projectId,\r\n        })\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const selectProjectsState = (state: RootState) => state.projects;\r\n\r\nexport const selectProjectById = (state: RootState, projectId: string) => {\r\n  return state.projects.projects.find((p) => p.id === projectId);\r\n};\r\n\r\nexport default projectsSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}