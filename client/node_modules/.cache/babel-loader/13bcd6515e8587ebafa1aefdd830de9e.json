{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport authService from '../../services/auth';\nimport { fetchProjects } from './projectSlice';\nimport storage from '../../utils/localStorage';\nimport { getErrorMsg } from './../../utils/helper';\nconst initialState = {\n  user: null,\n  loading: false,\n  error: null\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setUser: (state, action) => {\n      state.user = action.payload;\n      state.loading = false;\n      state.error = null;\n    },\n    logOutUser: (state, action) => {\n      state.user = null;\n    },\n    setAuthLoading: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    setAuthError: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    clearAuthError: state => {\n      state.error = null;\n    }\n  }\n});\nexport const {\n  setUser,\n  logOutUser,\n  setAuthError\n} = authSlice.actions;\nexport const login = credentials => {\n  return async dispatch => {\n    try {\n      const userData = await authService.login(credentials);\n      dispatch(setUser(userData));\n      storage.saveUser(userData);\n      authService.setToken(userData.token);\n      dispatch(fetchProjects());\n    } catch (err) {\n      dispatch(setAuthError(getErrorMsg(err)));\n    }\n  };\n};\nexport const registerUser = credentials => {\n  return async dispatch => {\n    try {\n      const newUser = await authService.register(credentials);\n      dispatch(setUser(newUser));\n      storage.saveUser(newUser);\n      authService.setToken(newUser.token);\n      dispatch(fetchProjects());\n    } catch (err) {\n      dispatch(setAuthError(getErrorMsg(err)));\n    }\n  };\n};\nexport const autoLogin = () => {\n  return async dispatch => {\n    try {\n      const loggedUser = storage.loadUser();\n\n      if (loggedUser) {\n        dispatch(setUser(loggedUser));\n        authService.setToken(loggedUser.token);\n        dispatch(fetchProjects());\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const logout = () => {\n  return async dispatch => {\n    dispatch(logOutUser);\n    storage.removeUser();\n  };\n};\nexport const selectAuthState = state => state.auth;\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/david/Desktop/Bug-Tracker-Pern/client/src/redux/slices/authSlice.ts"],"names":["createSlice","authService","fetchProjects","storage","getErrorMsg","initialState","user","loading","error","authSlice","name","reducers","setUser","state","action","payload","logOutUser","setAuthLoading","setAuthError","clearAuthError","actions","login","credentials","dispatch","userData","saveUser","setToken","token","err","registerUser","newUser","register","autoLogin","loggedUser","loadUser","console","log","logout","removeUser","selectAuthState","auth","reducer"],"mappings":"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","sourcesContent":["import { AppThunk } from './../store';\r\nimport { CredentialsPayload } from './../types';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../store';\r\nimport { UserState } from '../types';\r\nimport authService from '../../services/auth';\r\n\r\nimport { fetchProjects } from './projectSlice';\r\nimport storage from '../../utils/localStorage';\r\nimport { getErrorMsg } from './../../utils/helper';\r\n\r\ninterface InitialAuthState {\r\n  user: UserState | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: InitialAuthState = {\r\n  user: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    setUser: (state, action: PayloadAction<UserState>) => {\r\n      state.user = action.payload;\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n    logOutUser: (state, action) => {\r\n      state.user = null;\r\n    },\r\n    setAuthLoading: (state) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    },\r\n    setAuthError: (state, action: PayloadAction<string>) => {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    },\r\n    clearAuthError: (state) => {\r\n      state.error = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setUser, logOutUser, setAuthError } = authSlice.actions;\r\n\r\nexport const login = (credentials: CredentialsPayload): AppThunk => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const userData = await authService.login(credentials);\r\n      dispatch(setUser(userData));\r\n\r\n      storage.saveUser(userData);\r\n      authService.setToken(userData.token);\r\n\r\n      dispatch(fetchProjects());\r\n    } catch (err) {\r\n      dispatch(setAuthError(getErrorMsg(err)));\r\n    }\r\n  };\r\n};\r\n\r\nexport const registerUser = (credentials: CredentialsPayload): AppThunk => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const newUser = await authService.register(credentials);\r\n      dispatch(setUser(newUser));\r\n\r\n      storage.saveUser(newUser);\r\n      authService.setToken(newUser.token);\r\n\r\n      dispatch(fetchProjects());\r\n    } catch (err) {\r\n      dispatch(setAuthError(getErrorMsg(err)));\r\n    }\r\n  };\r\n};\r\n\r\nexport const autoLogin = (): AppThunk => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const loggedUser = storage.loadUser();\r\n      if (loggedUser) {\r\n        dispatch(setUser(loggedUser));\r\n        authService.setToken(loggedUser.token);\r\n        dispatch(fetchProjects());\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const logout = (): AppThunk => {\r\n  return async (dispatch) => {\r\n    dispatch(logOutUser);\r\n    storage.removeUser();\r\n  };\r\n};\r\n\r\nexport const selectAuthState = (state: RootState) => state.auth;\r\n\r\nexport default authSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}